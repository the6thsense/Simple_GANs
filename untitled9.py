# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1so85l_CJhIT8wrukWjQXpGMMmD5ZkkE9
"""

import torch.nn as nn
import torch
from torch.utils.data import DataLoader as dataloader
import numpy as np
import matplotlib.pyplot as plt

class reshape_(nn.Module):
    
    def __init__(self,  *out_shape ):
        super().__init__()
        
        self.shape = tuple( out_shape )
    
    def forward(self, img ):
        
        return img.reshape( *self.shape )

generator = nn.Sequential(  reshape_(-1,75*75*3)
                            ,nn.Linear(75*75*3,1000)
                                        ,nn.Tanh()
                          ,nn.Linear(1000,500)
                                        ,nn.Tanh()
                          ,nn.Linear(500, 100)
                                        ,nn.Tanh()
                          ,nn.Linear(100, 500)
                                        ,nn.Tanh()
                          ,nn.Linear(500,1000)
                                        ,nn.Tanh()
                          ,nn.Linear(1000, 10000)
                                        ,nn.Tanh()
                          ,nn.Linear(10000,75*75*3)
                                        ,nn.Tanh()
                                    ,reshape_(1,3,75,75)
                                        
                                          )


discriminator = nn.Sequential(  nn.Conv2d( 3,5, (6,6)),
                                          nn.Tanh(),
                              nn.Conv2d( 5,5, (6,6)),
                                           nn.Tanh(),
                              nn.Conv2d( 5,5, (6,6)),
                                           nn.Tanh(),
                              nn.Conv2d( 5,5, (6,6)),
                                           nn.Tanh(),
                              nn.Conv2d( 5,5, (6,6)),
                                           nn.Tanh(),
                              nn.Conv2d( 5,5, (6,6)),
                                           nn.Tanh(),
                              nn.Conv2d( 5,5, (6,6)),
                                           nn.Tanh(),
                              nn.Conv2d( 5,5, (6,6)),
                                           nn.Tanh(),
                              nn.Conv2d( 5,5, (6,6)),
                                           nn.Tanh(),
                              nn.Conv2d( 5,5, (6,6)),
                                           nn.Tanh(),
                              nn.Conv2d( 5,5, (6,6)),
                                           nn.Tanh(),
                              nn.Conv2d( 5,5, (6,6)),
                                           nn.Tanh(),
                              nn.Conv2d( 5,5, (6,6)),
                                           nn.Tanh(),
                              nn.Conv2d( 5,5, (6,6)),
                                           nn.Tanh(),
                              nn.Conv2d( 5,2, (5,5)),
                                           nn.Softmax(),
                              
                                            )

discriminator( torch.randn(1,3,75,75).to("cuda") )



class x():
    def __init__(self, generator, discriminator, iters = 1, LRd = 1,LRg = 1, epochs = 50):
        
        x = plt.imread( "https://upload.wikimedia.org/wikipedia/commons/e/e9/Felis_silvestris_silvestris_small_gradual_decrease_of_quality.png")
        x = x[ 225:300,300:375,: ].reshape( 1, 3,75, 75)
        x = (x-x.mean())/x.std()
        img = torch.Tensor( x)
        print("img:",img.shape,"x:",x.shape)
        
        
        
        self.generator = generator

        self.discriminator =  discriminator
        
        optimizerg = torch.optim.Adam( self.generator.parameters() ,lr = LRg)
        optimizerd = torch.optim.SGD( self.discriminator.parameters(), lr = LRd)
        loss1 = nn.BCELoss()
        loss2 = nn.BCELoss()

        self.dis_lossx = []
        self.dis_lossimg = []
        self.gen_x_loss = []
        
        self.discriminator, self.generator = self.discriminator.to('cuda') , self.generator.to('cuda')
        
        img = img.to('cuda')
        z = torch.autograd.Variable()
        
        for epoch in range( epochs ):
          print( "epoch:" ,  epoch +1 ) 

          for i in range(iters):
              
              optimizerd.zero_grad()
              z = torch.Tensor( np.random.randn(1,3,75,75) )
              z = z.to("cuda")
              x = self.generator(z)
              
              dis = self.discriminator(x)

              dis_lossimg = loss1( self.discriminator( img ), torch.autograd.Variable(torch.Tensor( [0,1] )).to('cuda'))
              dis_lossx = loss1( dis, torch.autograd.Variable(torch.Tensor( [1,0] ) ).to('cuda'))
              
              dis_lossimg.backward()
              dis_lossx.backward()

              optimizerd.step()

              self.dis_lossimg.append(dis_lossimg.item())
              self.dis_lossx.append(dis_lossx.item())
          
              
          for i in range(iters):
              
              optimizerg.zero_grad()

              z = torch.Tensor( np.random.randn( 1,3,75,75 ) )
              z = z.to( "cuda" )

              x = self.generator( z )

              dis = self.discriminator( x )

              genloss =  loss2( dis , torch.autograd.Variable( torch.Tensor([0,1])).to('cuda') )
              genloss.backward()
              optimizerg.step()
              self.gen_x_loss.append(genloss.item())

              


    def produce(self,x):
        
        y = self.generator( x.to('cuda') )
        
        return y.cpu().detach().numpy().reshape( 75, 75,3 ), self.gen_x_loss, self.dis_lossx, self.dis_lossimg




a = x(generator, discriminator, 100, LRg = 0.001, LRd = 0.001 , epochs =  50
      )


v, gen_x_loss, dis_lossx, dis_lossimg = a.produce(torch.randn( 1, 3, 75, 75))

image, ax1 = plt.subplots( 1,1, figsize = (20,20))
x = plt.imread( "https://upload.wikimedia.org/wikipedia/commons/e/e9/Felis_silvestris_silvestris_small_gradual_decrease_of_quality.png")
ax1.imshow( a.generator(torch.randn( 1, 3, 75, 75).to('cuda')).cpu().detach().numpy().reshape( 75,75,3 )*x.std()+x.mean())  


fig, (ax2,ax3,ax4) = plt.subplots( 3,1, figsize = (10,10))
ax2.plot(gen_x_loss, color ="green")
ax3.plot( dis_lossx[:], label = "dis_lossx", color= "orange")
ax4.plot( dis_lossimg[:], label = "dis_lossimg", color = "orange")

for ax ,i in zip (fig.axes, ["gen_loss", "dis_loss", "dis_loss_img"]):
  ax.legend = i

image,(ax1,ax2) = plt.subplots( 1,2, figsize = (20,20))
x = plt.imread( "https://upload.wikimedia.org/wikipedia/commons/e/e9/Felis_silvestris_silvestris_small_gradual_decrease_of_quality.png")[ 225:300,300:375,: ]
        
ax2.imshow( generator(torch.randn( 1, 3, 75, 75).to('cuda')).cpu().detach().numpy().reshape( 75,75,3 ))  
ax1.imshow( 0.2*generator(torch.randn( 1, 3, 75, 75).to('cuda')).cpu().detach().numpy().reshape( 75,75,3 )+ x )